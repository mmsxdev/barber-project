generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
  directUrl = env("MONGODB_URL")
}

enum Role {
  ADMIN
  BARBER
  SECRETARY
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum FinanceCategory {
  SALARY
  PRODUCT_SALE
  SERVICE
  RENT
  MAINTENANCE
  OTHER
}

enum SchedulingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  cpf      String    @unique
  name     String
  password String
  role     Role      @default(BARBER)
  createdSchedulings Scheduling[] @relation("CreatedSchedulings")
  barberSchedulings  Scheduling[] @relation("BarberSchedulings")
  finances           Finance[]
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  price           Float
  quantityInStock Int
  createdAt       DateTime  @default(now())
  finances        Finance[]
}

model Finance {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  type        FinanceType
  value       Float
  description String
  category    FinanceCategory
  date        DateTime   @default(now())
  product     Product?   @relation(fields: [productId], references: [id])
  productId   String?    @db.ObjectId
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
}

model Scheduling {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  clientName  String
  dateTime    DateTime
  service     String
  status      SchedulingStatus @default(PENDING)
  phone       String?
  createdBy   User       @relation("CreatedSchedulings", fields: [userId], references: [id])
  userId      String     @db.ObjectId
  barber      User       @relation("BarberSchedulings", fields: [barberId], references: [id])
  barberId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
}